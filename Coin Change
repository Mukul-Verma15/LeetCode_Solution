class Solution {
public:
    int coinChange(vector<int>& coins, int amt) {
        int n = coins.size();


        const int INF = 1e9; 

        vector<vector<int>> dp(n, vector<int>(amt + 1, INF));

        for (int j = 0; j <= amt; j++) {
            if (j % coins[0] == 0) dp[0][j] = j / coins[0];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= amt; j++) {
                int notTake = dp[i - 1][j];
                int take = INF;
                if (coins[i] <= j) take = 1 + dp[i][j - coins[i]];
                dp[i][j] = min(take, notTake);
            }
        }

        return (dp[n - 1][amt] >= INF) ? -1 : dp[n - 1][amt];
    }



    <!-- long long solve(vector<int>& coins, int amt,int n, vector<vector<int>>&dp){
        if(n<0){
            return INT_MAX;
        }
        if(amt ==0){
            return 0;
        }
        if(amt<0){
            return INT_MAX;
        }
        if(dp[n][amt]!=-1){
            return dp[n][amt] ;
        }
        long long take = 1+solve(coins,amt-coins[n],n-1,dp);
        long long take1 = 1+solve(coins,amt-coins[n],n,dp);
        long long ntake = solve(coins,amt,n-1,dp);

        return dp[n][amt] = min({take,take1,ntake});
    } -->
};
