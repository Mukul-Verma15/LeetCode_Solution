/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        
        
        // empty
        if (!root) return nullptr;
        // single
        if (!root->left && !root->right) return root;

        // // 01 approach - sc = o(n)
        // // lot
        // queue<Node*> q;
        // q.push(root);

        // while (!q.empty()) {
        //     int n = q.size();

        //     // operation on all sibling nodes
        //     for (int i = 0; i<n; i++) {
        //         auto front = q.front();
        //         q.pop();

        //         // last node
        //         if (i == n-1) {
        //             front->next = nullptr;
        //         }
        //         // not last node
        //         else {
        //             front->next = q.front();
        //         }

        //         // insert children if exists
        //         if (front->left) q.push(front->left);
        //         if (front->right) q.push(front->right);
        //     }
        // }

        // return root;


        // 02 approach - sc = o(1)
        Node* level = root;

        while (level) {

            Node* prev = nullptr;
            Node* currLevelNode = level;
            Node* nextLevel = nullptr;

            // upper level already connected
            while (currLevelNode) {

                // connect [prev to left child
                if (currLevelNode->left) {
                    if (!nextLevel) nextLevel = currLevelNode->left;
                    if (prev) prev->next = currLevelNode->left;

                    prev = currLevelNode->left;
                }
                // connect prev to right child
                if (currLevelNode->right) {
                    if (!nextLevel) nextLevel = currLevelNode->right; 
                    if (prev) prev->next = currLevelNode->right;

                    prev = currLevelNode->right;
                }

                // next node
                currLevelNode = currLevelNode->next;
            }
            // next level
            level = nextLevel;
        }

        return root;
    }
};
